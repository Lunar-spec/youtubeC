generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channels Channel?
  comments Comment[]

  videoLikes      VideoLike[]
  videoDislikes   VideoDislike[]
  commentLikes    CommentLike[]
  commentDislikes CommentDislike[]
}

model Channel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  avatarUrl   String?
  bannerUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  videos Video[]
}

model Video {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  url          String
  thumbnailUrl String
  duration     Int
  views        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String  @db.ObjectId

  comments Comment[]
  likes    VideoLike[]
  dislikes VideoDislike[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  Video   Video?  @relation(fields: [videoId], references: [id])
  videoId String? @db.ObjectId

  likes    CommentLike[]
  dislikes CommentDislike[]
}

model VideoLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String @db.ObjectId
}

model VideoDislike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String @db.ObjectId
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId
}

model CommentDislike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId
}
